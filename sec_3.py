# -*- coding: utf-8 -*-
"""sec 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OnBFUK336iqxNC_hWkGRuDjGaWZoVrib

k-최근접 이웃 회귀

회귀: 임의의 숫자를 예측

타깃값: 농어의 무게
"""

import numpy as np
perch_length = np.array([8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0,
       21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7,
       23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5,
       27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0,
       39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5,
       44.0])
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

import matplotlib.pyplot as plt

#분류일 경우에는 2개의 특성, 회귀의 경우에는 1개의 특성으로 
plt.scatter(perch_length, perch_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()



#훈련세트 준비
from sklearn.model_selection import train_test_split

#stratify 사용하지 않음; 임의의 숫자가 타깃이므로 랜덤하게 섞어서 훈련세트와 테스트 세트로 나눔 
train_input, test_input, train_target, test_target = train_test_split(perch_length, perch_weight, random_state=42)
print("original train_input", train_input[:5])

#1차원배열 -> 2차원배열 
train_input = train_input.reshape(-1,1)
test_input = test_input.reshape(-1,1)

print("train_input after reshape", train_input[:5])

"""일반적으로는 훈련세트의 점수가 더 높음

훈련세트 점수 > 테스트세트 점수 : 과대적합 (overfitting)

훈련세트 점수 < 테스트세트 점수 : 과소적합 (underfitting)
"""

from sklearn.neighbors import KNeighborsRegressor
knr = KNeighborsRegressor()

#k-최근접 이웃 회귀 모델 훈련
knr.fit(train_input, train_target)
print("test score",knr.score(test_input, test_target))
print("train_score",knr.score(train_input, train_target)) #분류에서는 정확도, 회귀에서는 R^2 (결정계수)

from sklearn.metrics import mean_absolute_error
test_prediction = knr.predict(test_input)

#테스트 세트에 대해 평균 절댓값 오차 계산
mae = mean_absolute_error(test_target, test_prediction)
#print(mae)

from sklearn.metrics import mean_absolute_error

test_prediction = knr.predict(test_input)
mae = mean_absolute_error(test_target, test_prediction) #타깃과 예측의 절댓값 오차를 평균하여 반환
print(mae)

#이웃의 갯수: k-최근접 알고리즘에서 과대/과소 적합을 조절하는 매개변수(hyper parameter)
#이웃의 갯수를 낮춤 => 과대적합
#이웃의 갯수를 늘림 => 과소적합

knr.n_neighbors = 3
knr.fit(train_input, train_target)

print("train score",knr.score(train_input, train_target))
print("test score",knr.score(test_input, test_target))

#좌표 설정
x = np.arange(5,45).reshape(-1,1)

for n in [1,5,10]:
  #모델 훈련
  knr.n_neighbors = n
  knr.fit(train_input, train_target)

  prediction = knr.predict(x)

  plt.scatter(train_input, train_target)
  plt.plot(x, prediction)
  plt.title('n_neighbors = {}'.format(n))
  plt.xlabel('length')
  plt.ylabel('weight')
  plt.show()

"""#선형회귀"""

#50cm 농어의 이웃을 구함
distanes, indexes = knr.kneighbors([[50]])

#훈련 세트의 산점도
plt.scatter(train_input, train_target)
plt.scatter(train_input[indexes], train_target[indexes], marker = 'D')

#50cm 농어 데이터
plt.scatter(50, 1033, marker = '^')
plt.show()

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

#선형 회귀 모델 훈련
lr.fit(train_input, train_target)

#50cm 농어에 대한 예측
print("50cm 농어 무게 예측값",lr.predict([[50]]))
print("y = ax+b, [a, b]|",lr.coef_,lr.intercept_) #data에서 학습한 값들을 저장할 때, 구분하기 위하여 _ 문자를 넣음. 특성은 여러개 일 수 있으므로 coef는 배열임

#훈련 세트의 산점도
plt.scatter(train_input, train_target)

#15~50까지 1차 방정식 그래프 그림 
plt.plot([15,50], [15*lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept_])

plt.scatter(50, 1241.8, marker = '^')
plt.show()

#과대적합, 과소적합은 여러 개로 시험해보고 상대적으로 판단 
print("train score",lr.score(train_input, train_target))
print("test score",lr.score(test_input, test_target))

#산점도를 보았을 때, 2차함수가 좀 더 적합해보임 => 다항회귀
#무게 = a*길이^2+b*길이+c

#원래 데이터의 제곱 값을 앞에 추가 
train_poly = np.column_stack((train_input**2, train_input))
test_poly = np.column_stack((test_input**2, test_input))

#선형 회귀 모델 훈련
lr = LinearRegression()
lr.fit(train_poly, train_target)

#50cm 농어에 대한 예측
print("50cm 농어 무게 예측값",lr.predict([[50**2, 50]]))
print("ax^2+bx+c, [a, b], c",lr.coef_,lr.intercept_)

#구간별 직선을 그리기 위해 정수 배열을 만듦
point = np.arange(15,50)

#훈련 세트의 산점도를 그림
plt.scatter(train_input, train_target)

#15에서 49까지 2차 방정식 그래프를 그림
plt.plot(point, 1.01*point**2-21.6*point+116.05)

#50cm 농어 데이터
plt.scatter([50], [1574], marker = '^')
plt.show()

print('train score',lr.score(train_poly, train_target))
print('test score',lr.score(test_poly, test_target))

"""다중 회귀 (multiple regression)

넘파이 튜토리얼: http://ml-ko.kr/homl2/toos_numpy.html

판다스 튜토리얼: http://ml-ko.kr/homl2/toos_pandas.html
"""

import pandas as pd

df = pd.read_csv('https://bit.ly/perch_csv')
perch_full = df.to_numpy()

print(perch_full)

import numpy as np

perch_weight = np.array(
    [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 
     110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 
     130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 
     197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 
     514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 
     820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 
     1000.0, 1000.0]
     )

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(perch_full, perch_weight, random_state=42)

from sklearn.preprocessing import PolynomialFeatures

#degree=2
t_poly = PolynomialFeatures() 
t_poly.fit([[2,3]]) #실제 학습하는 건 아님. 

#1(bias), 2, 3, 2**2, 2*3, 3**2
print("t_poly.transform",t_poly.transform([[2,3]]))

poly = PolynomialFeatures(include_bias=False)
poly.fit([[2,3]]) 

#2, 3, 2**2, 2*3, 3**2
print("poly.transform",poly.transform([[2,3]]))

print("train_input.shape", train_input.shape)
poly.fit(train_input)
train_poly = poly.transform(train_input)

print("train_poly.shape",train_poly.shape)
poly.get_feature_names() #네번째 특성: 길이^2 이라는 의미, 각 특성을 확인할 수 있음, polynomial의 degree 변수가 2 이므로, 2차까지

test_poly = poly.transform(test_input) 

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(train_poly, train_target)

print("train_score",lr.score(train_poly, train_target))
print("test_score",lr.score(test_poly, test_target))

#특성을 더 많이 추가 
poly = PolynomialFeatures(degree = 5, include_bias=False)

poly.fit(train_input)
train_poly = poly.transform(train_input)
test_poly = poly.transform(test_input)

print("train_poly.shape",train_poly.shape)

lr.fit(train_poly, train_target)

print("train score", lr.score(train_poly, train_target))
print("test score", lr.score(test_poly, test_target)) #과대적합, 훈련세트의 갯수 < 특성 이 원인

"""과대적합을 줄이는 방법 => 규제(regularization)\
가중치(기울기)를 작게 만듦. 1. 릿지 회귀 2. 라소 회귀


"""

#특성의 스케일을 표준화해야함 
from sklearn.preprocessing import StandardScaler

ss = StandardScaler()
ss.fit(train_poly)

train_scaled = ss.transform(train_poly)
test_scaled = ss.transform(test_poly)

#릿지 회귀

from sklearn.linear_model import Ridge
ridge = Ridge()
ridge.fit(train_scaled, train_target)
print("ridge train score", ridge.score(train_scaled, train_target))
print("ridge test score", ridge.score(test_scaled, test_target))

#alpha 값 조정하며 훈련
import matplotlib.pyplot as plt
train_score = []
test_score = []

alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]
for alpha in alpha_list:
    ridge = Ridge(alpha = alpha)
    ridge.fit(train_scaled, train_target)

    train_score.append(ridge.score(train_scaled, train_target))
    test_score.append(ridge.score(test_scaled, test_target))

plt.plot(np.log10(alpha_list), train_score)
plt.plot(np.log10(alpha_list), test_score)
plt.xlabel('alpha')
plt.ylabel('R^2')
plt.show()

#두 그래프가 가까운 시점의 점수를 확인
ridge = Ridge(alpha=0.1)
ridge.fit(train_scaled, train_target)

print("ridge train score", ridge.score(train_scaled, train_target))
print("ridge test score", ridge.score(test_scaled, test_target))

#라쏘 회귀

from sklearn.linear_model import Lasso
lasso = Lasso()
lasso.fit(train_scaled, train_target)
print("lasso train score", lasso.score(train_scaled, train_target))
print("lasso test score", lasso.score(test_scaled, test_target))

#alpha 값 조정하며 훈련
train_score = []
test_score = []

alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]
for alpha in alpha_list:
    lasso = Lasso(alpha = alpha)
    lasso.fit(train_scaled, train_target)

    train_score.append(lasso.score(train_scaled, train_target))
    test_score.append(lasso.score(test_scaled, test_target))

plt.plot(np.log10(alpha_list), train_score)
plt.plot(np.log10(alpha_list), test_score)
plt.xlabel('alpha')
plt.ylabel('R^2')
plt.show()

#두 그래프가 가까운 시점의 점수를 확인
lasso = Lasso(alpha=10)
lasso.fit(train_scaled, train_target)

print("lasso train score", lasso.score(train_scaled, train_target))
print("lasso test score", lasso.score(test_scaled, test_target))

#라쏘 모델은 계수 값을 0으로 만들 수도 있음
print("라쏘 모델의 계수 중 0인 것의 갯수",np.sum(lasso.coef_ == 0))